---
name: Multi Platform Builder - Test

'on':
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]*'
    branches:
      - 'build-*'
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '15 01 * * WED'
#    - cron:  '15 * * * *'
#    - cron:  '*/30 * * * *'
  workflow_dispatch:
    inputs:
      tari_network:
        default: mainnet
        description: 'Tari network selector'
        type: choice
        options:
          - mainnet
          # pre
          - esme
          # rc
          - nextnet
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
      tags:
        description: 'Test scenario tags'

env:
  TBN_FILENAME: cross-compile-sample
#  target_cpu: "x86-64"
#  RUSTFLAGS: "-C target_cpu=x86-64"
#  features: "safe"
#  TBN_FILENAME: 'tari_base_node'
#  SQLITE3_LIB_DIR: 'C:\vcpkg\installed\x64-windows\lib'
#  VCPKGRS_DYNAMIC: 1
#  SQLITE_STATIC: 1
#  SQLITE3_STATIC: 1

jobs:
  build:
    name: Building Binaries
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
#        os: [ubuntu-18.04]
#        os: [macos-latest]
#        os: [ubuntu-18.04, windows-2019]
#        os: [ubuntu-latest, macos-latest, windows-latest]
#        os: [windows-latest, self-hosted]
#        os: [ubuntu-latest, macos-latest, windows-latest, self-hosted]
#        os: [ubuntu-18.04, ubuntu-20.04, macos-10.15, macos-11.0, windows-2016, windows-2019]
        # rustc --print target-features
        # features=+avx2,+fma?
#        features: ["safe", "avx2"]
        features: ["safe"]
        # rustc --print target-list?
        # rustc -C target-cpu=help
#        target_cpu: ["x86-64", "ivybridge", "skylake", "skylake-avx512"]
#        target_cpu: ["x86-64", "broadwell"]
        target_cpu: ["x86-64"]
#        exclude:
#          - target_cpu: "x86-64"
#            features: "avx2"

    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout source code
      uses: actions/checkout@v2

    - name: Declare TestNet for tags
      if: ${{ startsWith(github.ref, 'refs/tags/v') }}
      shell: bash
      run: |
        tagnet=${{github.ref_name}}
        echo $tagnet
        # case match is not RegEx, but wildcards/globs
        case "$tagnet" in
          v*-pre.*) TARI_NETWORK=esme
            ;;
          v*-rc.*) TARI_NETWORK=nextnet
            ;;
          *) TARI_NETWORK=mainnet
            ;;
        esac
        echo ${TARI_NETWORK}
        echo "TARI_NETWORK=${TARI_NETWORK}" >> $GITHUB_ENV

    - name: Declare some variables 4 GHA ${{ github.event_name }}
      id: vars
      shell: bash
      run: |
        echo "VBRANCH=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
        echo "VSHA_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
        echo "Event_Name: ${{ github.event_name }}"
        echo "Event.Schedule: ${{ github.event.schedule }}"
        echo "Log level: ${{ github.event.inputs.logLevel }}"
        echo "Tags: ${{ github.event.inputs.tags }}"

    - name: Skip this step every 24 hours
      id: vars-skip
      if: ${{ github.event_name == 'schedule' && github.event.schedule != '0 0 * * *' }}
      run: echo "This step will be skipped every 24 hours"

    - name: Default Destination Folder
      run: |
        echo "S3DESTOVERRIDE=" >> $GITHUB_ENV

    - name: Scheduled Destination Folder Override
      if: ${{ github.event_name == 'schedule' }}
      run: |
        echo "S3DESTOVERRIDE=daily/" >> $GITHUB_ENV

    - name: Setup Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
#        toolchain: nightly-2020-06-10
#        components: rustfmt
#        target: ${{ matrix.target }}
        override: true

    # Install OS specific dependencies
    - name: Install Linux dependencies
      if: startsWith(matrix.os,'ubuntu')
      run: sudo apt-get -y install zip

    - name: Install macOS dependencies
      if: startsWith(matrix.os,'macos')
      run: echo "All OSX deps installed"
#      run: brew install p7zip cmake

    - name: Install Windows dependencies
      continue-on-error: true  # WARNING: only for this example, remove it!
      if: startsWith(matrix.os,'windows')
      run: |
        vcpkg.exe install sqlite3:x64-windows zlib:x64-windows
        choco upgrade llvm psutils openssl strawberryperl -y
        dir 'C:\ProgramData\chocolatey\lib\psutils\tools\psutils-master'
        C:\ProgramData\chocolatey\lib\psutils\tools\psutils-master\shasum.ps1 -h

    - name: Set environment variables - Nix
      continue-on-error: true  # WARNING: only for this example, remove it!
      if: "!startsWith(matrix.os,'Windows')"
      run: |
        #echo "SHARUN='shasum --portable --algorithm 256'"  >> $GITHUB_ENV
        echo "SHARUN=shasum --algorithm 256" >> $GITHUB_ENV
        echo "CC=gcc" >> $GITHUB_ENV
        echo "TBN_EXT=" >> $GITHUB_ENV
        echo "S3DESTDIR=linux" >> $GITHUB_ENV
        echo "TBN_DIST=/dist" >> $GITHUB_ENV

    - name: Set environment variables - macOS
      if: startsWith(matrix.os,'macos')
      run: |
        echo "S3DESTDIR=osx" >> $GITHUB_ENV

    - name: Set environment variables - Windows
      continue-on-error: true  # WARNING: only for this example, remove it!
      if: startsWith(matrix.os,'Windows')
      shell: bash
      run: |
        echo "SHARUN=pwsh C:\ProgramData\chocolatey\lib\psutils\tools\psutils-master\shasum.ps1 --algorithm 256" >> $GITHUB_ENV
        echo "TBN_EXT=.exe" >> $GITHUB_ENV
        echo "TBN_DIST=\dist" >> $GITHUB_ENV
        echo "S3DESTDIR=windows" >> $GITHUB_ENV
        echo "SQLITE3_LIB_DIR=C:\vcpkg\installed\x64-windows\lib" >> $GITHUB_ENV
        echo "OPENSSL_DIR=C:\Program Files\OpenSSL-Win64" >> $GITHUB_ENV
        echo "LIBCLANG_PATH=C:\Program Files\LLVM\bin" >> $GITHUB_ENV

#        RUSTFLAGS: '-Ctarget-feature=+crt-static'
#        RUSTFLAGS: '-C target_cpu=${{ target_cpu }}'
#        CC: gcc

    - name: Get rust version
      id: rust-version
      run: echo "::set-output name=version::$(rustc --version)"
#      shell: bash
#      run: echo "RVersion=$(rustc --version)" >> $GITHUB_ENV

    - name: Cache cargo index
      uses: actions/cache@v2
      with:
        path: ~/.cargo/registry/index
        key: index-${{ runner.os }}-${{ github.run_number }}
        restore-keys: |
          index-${{ runner.os }}-
    - name: Create lockfile
      run: cargo generate-lockfile
    - name: Cache cargo registry
      uses: actions/cache@v2
      with:
        path: ~/.cargo/registry/cache
        key: registry-${{ runner.os }}-${{ steps.rust-version.outputs.version }}-${{ hashFiles('Cargo.lock') }}
#        key: registry-${{ runner.os }}-${RVersion}-${{ hashFiles('Cargo.lock') }}
    - name: Fetch dependencies
      run: cargo fetch
    - name: Cache target directory
      uses: actions/cache@v2
      with:
        path: target
        key: target-${{ runner.os }}-${{ steps.rust-version.outputs.version }}-${{ hashFiles('Cargo.lock') }}
#        key: target-${{ runner.os }}-${RVersion}-${{ hashFiles('Cargo.lock') }}

    - name: Build binaries
      uses: actions-rs/cargo@v1
      env:
        RUSTFLAGS: '-C target_cpu=${{ matrix.target_cpu }}'
        ROARING_ARCH: '${{ matrix.target_cpu }}'
#        CC: gcc
      with:
#        use-cross: true
        command: build
#        args: --release --features ${{ matrix.features }}
        args: --release
# Need to Look at feature builds?

    - shell: bash
#      continue-on-error: true  # WARNING: only for this example, remove it!
      run: |
        ls -la '${{ github.workspace }}'
        ls -la '${{ github.workspace }}/target/release/'
#        ls -la 'C:\ProgramData\chocolatey\lib\psutils\tools'
#        ls -la "${{ github.workspace }}/target/release/"{cross-compile-sample,cross-compile-sample.exe}
#        printenv

    - name: Prep Envs for Binary
      shell: bash
      run: |
        mkdir -p "$GITHUB_WORKSPACE${TBN_DIST}"
        cd "$GITHUB_WORKSPACE${TBN_DIST}"
        #VERSION=$(awk -F ' = ' '$1 ~ /version/ { gsub(/[\"]/, "", $2); printf("%s",$2) }' "$GITHUB_WORKSPACE/applications/tari_base_node/Cargo.toml")
        VERSION="v0.1.0"
        echo "Branch: ${VBRANCH}"
        echo "Sha: ${VSHA_SHORT}"
        echo "VERSION=${VERSION}" >> $GITHUB_ENV
        # BINFILE="${TBN_FILENAME}-${{ matrix.os }}-${{ matrix.target_cpu }}-${{ matrix.features }}-${VERSION}${TBN_EXT}"
        # <bin name>_<version>_<commit?>_<specifics>
        BINFILE="${TBN_FILENAME}-${VERSION}-${VSHA_SHORT}-${{ matrix.os }}-${{ matrix.target_cpu }}-${{ matrix.features }}${TBN_EXT}"
        echo "BINFILE=${BINFILE}" >> $GITHUB_ENV
        echo "Copying file ${BINFILE} too $(pwd)"
        cp -v "$GITHUB_WORKSPACE/target/release/${TBN_FILENAME}${TBN_EXT}" "./${BINFILE}"

    - name: Import macOS Certs
      if: startsWith(matrix.os,'macos')
      uses: apple-actions/import-codesign-certs@v1
      with:
        p12-file-base64: ${{ secrets.TARICERTIFICATES }}
        p12-password: ${{ secrets.TARICERTIFICATESPWD }}

    - name: Sign macOS Binary
      continue-on-error: true  # WARNING: only for this example, remove it!
      if: startsWith(matrix.os,'macos')
      shell: bash
      run: |
        # echo "Pre Verify signed OSX Binary - ${{ env.BINFILE }} ..."
        # codesign --display --verbose=4 --verify --check-notarization --deep "${GITHUB_WORKSPACE}${{ env.TBN_DIST }}/${{ env.BINFILE }}" | exit 0
        # spctl --assess --verbose "${GITHUB_WORKSPACE}${{ env.TBN_DIST }}/${{ env.BINFILE }}" | exit 0
        # codesign --test-requirement="=notarized" --verify -vvvv "${GITHUB_WORKSPACE}${{ env.TBN_DIST }}/${{ env.BINFILE }}"
        # spctl --assess --type install --context context:primary-signature -v "${GITHUB_WORKSPACE}${{ env.TBN_DIST }}/${{ env.BINFILE }}"
        # spctl --assess --type execute --context context:primary-signature -v "${GITHUB_WORKSPACE}${{ env.TBN_DIST }}/${{ env.BINFILE }}"
        # spctl --assess --type open --context context:primary-signature -v "${GITHUB_WORKSPACE}${{ env.TBN_DIST }}/${{ env.BINFILE }}"
        # xcrun stapler validate "${GITHUB_WORKSPACE}${{ env.TBN_DIST }}/${{ env.BINFILE }}"
        echo "Pre Verify signed OSX Binary - ${{ env.BINFILE }} ..."
        #codesign --display --verbose=4 "${GITHUB_WORKSPACE}${{ env.TBN_DIST }}/${{ env.BINFILE }}"
        echo "Signed OSX Binary - ${{ env.BINFILE }} ..."
        #codesign --options runtime --force --timestamp --verify --verbose --sign "${{ secrets.OSXSIGN }}" "${GITHUB_WORKSPACE}${{ env.TBN_DIST }}/${{ env.BINFILE }}"
        #echo "Post Verify signed OSX Binary - ${{ env.BINFILE }} ..."
        #codesign --display --verbose=4 --verify --check-notarization --deep "${GITHUB_WORKSPACE}${{ env.TBN_DIST }}/${{ env.BINFILE }}" | exit 0
        #spctl --assess --verbose "${GITHUB_WORKSPACE}${{ env.TBN_DIST }}/${{ env.BINFILE }}" | exit 0
        exit 0

    - name: Archive and Sign Binaries
      continue-on-error: true  # WARNING: only for this example, remove it!
      shell: bash
      run: |
        echo "Archive ${{ env.BINFILE }} too ${{ env.BINFILE }}.zip"
        cd "$GITHUB_WORKSPACE${{ env.TBN_DIST }}"
        zip -j "${{ env.BINFILE }}.zip" "${{ env.BINFILE }}"
        echo "Compute shasum"
        ${SHARUN} "${{ env.BINFILE }}.zip" >> "${{ env.BINFILE }}.zip.sha256"
        cat "${{ env.BINFILE }}.zip.sha256"
        echo "Verifications is "
        ${SHARUN} --check "${{ env.BINFILE }}.zip.sha256"
        ls -la
        pwd
#        printenv

    - name: Upload binary
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.TBN_FILENAME }}-${{ env.VERSION  }}-${{ env.VSHA_SHORT }}-${{ matrix.os }}-${{ matrix.target_cpu }}-${{ matrix.features }}
        path: '${{ github.workspace }}${{ env.TBN_DIST }}/${{ env.BINFILE }}.zip*'

    - name: Sync dist to S3 - Bash
      continue-on-error: true  # WARNING: only for this example, remove it!
      shell: bash
      run: |
        echo "Starting upload ... ${{ env.SOURCE }}"
        aws s3 ${{ env.S3CMD }} --region ${{ secrets.AWS_REGION }} \
          "${{ env.SOURCE }}" \
          s3://${{ secrets.AWS_S3_BUCKET }}/${{ env.DEST_DIR }} \
          ${{ env.S3OPTIONS }}
        echo "Done - $?"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        SOURCE: '${{ github.workspace }}${{ env.TBN_DIST }}'
        DEST_DIR: 'test/${{ env.S3DESTOVERRIDE }}${{ env.S3DESTDIR }}/'
        S3CMD: 'cp'
        S3OPTIONS: '--recursive'
#        S3OPTIONS: '--recursive --exclude "*" --include "*.zip*"'
#        S3OPTIONS: '--acl public-read'
