---
name: Matrix Build

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
    branches:
      - build-*

env:
  TBN_FILENAME: "leet_suite"
  toolchain: nightly-2022-05-01
  matrix-json-file: ".github/workflows/matrix-build.json"

jobs:
  matrix-prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2

      - name: Set Matrix
        id: set-matrix
        run: |
          # matrix=$( jq -s -c .[] ${{ env.matrix-json-file }} )
          # target selection of build images
          # matrix_selection=$( jq -c '.[] | select( ."build_enabled" != false )' ${{ env.matrix-json-file }} )
          # matrix_selection=$( jq -c '.[] | select( ."name" == "linux-x86" )' ${{ env.matrix-json-file }} )
          matrix_selection=$( jq -c '.[] | select( ."build_enabled" == true )' ${{ env.matrix-json-file }} )
          # Rebuild the json matrix
          matrix=$(echo ${matrix_selection} | jq -s -c '{"builds": .}')
          echo $matrix
          echo $matrix | jq .
          echo "::set-output name=matrix::$matrix"

  matrix-check:
    runs-on: ubuntu-latest
    needs: matrix-prep
    steps:
      - name: Install json2yaml
        run: |
          sudo npm install -g json2yaml

      - name: Check matrix definition
        run: |
          matrix='${{ needs.matrix-prep.outputs.matrix }}'
          echo $matrix
          echo $matrix | jq .
          echo $matrix | json2yaml

  build:
    name: Building ${{ matrix.builds.name }} on ${{ matrix.builds.runs-on }}
    needs: matrix-prep
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix-prep.outputs.matrix) }}
    runs-on: ${{ matrix.builds.runs-on }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          submodules: false

      - name: Declare Global Variables 4 GHA ${{ github.event_name }}
        id: vars
        shell: bash
        run: |
          echo "VBRANCH=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
          echo "VSHA_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Set environment variables - Nix
        if: "!startsWith(runner.os,'Windows')"
        run: |
          echo "SHARUN=shasum --algorithm 256" >> $GITHUB_ENV
          echo "ARCHIVERUN=zip -j" >> $GITHUB_ENV
          echo "CC=gcc" >> $GITHUB_ENV
          echo "TBN_EXT=" >> $GITHUB_ENV
          echo "LIB_PRE=lib" >> $GITHUB_ENV
          echo "SHELL_EXT=.sh" >> $GITHUB_ENV
          echo "PLATFORM_SPECIFIC_DIR=linux" >> $GITHUB_ENV
          echo "TBN_DIST=/dist" >> $GITHUB_ENV

      - name: Set environment variables - Windows
        if: startsWith(runner.os,'Windows')
        shell: bash
        run: |
          echo "SHARUN=pwsh C:\ProgramData\chocolatey\lib\psutils\tools\psutils-master\shasum.ps1 --algorithm 256" >> $GITHUB_ENV
          echo "ARCHIVERUN=7z a" >> $GITHUB_ENV
          echo "TBN_EXT=.exe" >> $GITHUB_ENV
          echo "LIB_EXT=.dll" >> $GITHUB_ENV
          echo "LIB_PRE=" >> $GITHUB_ENV
          echo "SHELL_EXT=.bat" >> $GITHUB_ENV

      - name: Install macOS dependencies
        if: startsWith(runner.os,'macOS')
        run: brew install cmake zip coreutils automake autoconf

      - name: Install Windows dependencies
        if: startsWith(runner.os,'Windows')
        run: |
          choco upgrade psutils -y

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          components: rustfmt, clippy
          toolchain: ${{ matrix.builds.rust }}
          target: ${{ matrix.builds.target }}
          override: true

      - name: Cache cargo files and outputs
        uses: Swatinem/rust-cache@v1

      - name: Build rust binaries - Normal
        # if: ${{ matrix.builds.name != 'linux-arm64' }}
        uses: actions-rs/cargo@v1
        env:
          # RUSTFLAGS: "-C target_cpu=${{ matrix.builds.target_cpu }}"
          ROARING_ARCH: "${{ matrix.builds.target_cpu }}"
        with:
          use-cross: ${{ matrix.builds.cross }}
          command: build
          # args: --release --target ${{ matrix.builds.target }} ${{ matrix.builds.target_bins }}
          args: >
            --release --target ${{ matrix.builds.target }}
            ${{ matrix.builds.target_bins }}

      - name: Copy binaries to folder for zipping
        shell: bash
        run: |
          mkdir -p "${{ runner.temp }}${{ env.TBN_DIST }}"
          cd "${{ runner.temp }}${{ env.TBN_DIST }}"
          pwd
          VERSION="v0.0.1"
          echo "Branch: ${VBRANCH}"
          echo "Sha: ${VSHA_SHORT}"
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "VSHA_SHORT=${VSHA_SHORT}" >> $GITHUB_ENV
          BINFILE="${TBN_FILENAME}-${VERSION}-${VSHA_SHORT}-${{ matrix.builds.name }}${TBN_EXT}"
          echo "BINFILE=${BINFILE}" >> $GITHUB_ENV
          echo "Copying files for ${BINFILE} to $(pwd)"
          ls -la "$GITHUB_WORKSPACE/target/${{ matrix.builds.target }}/release/"
          FILES=(
            "cross-compile-sample"
          )
          for FILE in "${FILES[@]}"; do
            if [ -f "$GITHUB_WORKSPACE/target/${{ matrix.builds.target }}/release/${FILE}${TBN_EXT}" ]; then
              cp -v "$GITHUB_WORKSPACE/target/${{ matrix.builds.target }}/release/${FILE}${TBN_EXT}" .
            fi
          done
          ls -la

      - name: Archive and Checksum Binaries
        shell: bash
        run: |
          echo "Archive ${{ env.BINFILE }} too ${{ env.BINFILE }}.zip"
          cd "${{ runner.temp }}${{ env.TBN_DIST }}"
          pwd
          ls -la
          "${{ env.ARCHIVERUN }} "${{ env.BINFILE }}.zip" *
          echo "Compute shasum"
          ${SHARUN} "${{ env.BINFILE }}.zip" >> "${{ env.BINFILE }}.zip.sha256"
          cat "${{ env.BINFILE }}.zip.sha256"
          echo "Verifications is "
          ${SHARUN} --check "${{ env.BINFILE }}.zip.sha256"
          if [ -f "${{ env.distDirPKG }}/${{ env.TBN_FILENAME }}-${{ matrix.builds.name }}-${{ env.VERSION }}.pkg" ]; then
            echo "Add PKG to $GITHUB_WORKSPACE${{ env.TBN_DIST }} "
            cp -v "${{ env.distDirPKG }}/${{ env.TBN_FILENAME }}-${{ matrix.builds.name }}-${{ env.VERSION }}.pkg" "$GITHUB_WORKSPACE${{ env.TBN_DIST }}"
            ${SHARUN} "${{ env.TBN_FILENAME }}-${{ matrix.builds.name }}-${{ env.VERSION }}.pkg" >> "${{ env.TBN_FILENAME }}-${{ matrix.builds.name }}-${{ env.VERSION }}.pkg.sha256"
            ${SHARUN} --check "${{ env.TBN_FILENAME }}-${{ matrix.builds.name }}-${{ env.VERSION }}.pkg.sha256"
          fi

      - name: Artifact upload for Archive
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.TBN_FILENAME }}_archive-${{ matrix.builds.name }}
          path: "${{ runner.temp }}${{ env.TBN_DIST }}/${{ env.BINFILE }}.zip*"
